-- Setup Azure Open AI Endpoint
select azure_ai.set_setting('azure_openai.endpoint','https://<UPDATE YOUR AZURE OPEN AI DEPLOYMENT>.openai.azure.com/'); 
select azure_ai.set_setting('azure_openai.subscription_key', '<UPDATE YOUR KEY>');

-- Setup AI Services Language (Cognitive Services) Endpoint
select azure_ai.set_setting('azure_cognitive.endpoint','https://<UPDATE YOUR AZURE AI SERVICES NAME>.cognitiveservices.azure.com/'); 
select azure_ai.set_setting('azure_cognitive.subscription_key', '<UPDATE YOUR KEY>');


-- Sample Embedding directly within Database
SELECT azure_openai.create_embeddings('BeckerEmbedding', 'This is something interesting I want to embed');

-- Sample Sentiment call directly within Database
SELECT a.* FROM azure_cognitive.analyze_sentiment('Tyler''s Vector DB Session was short but awesome!','en') a;


-- Create a Session table
CREATE TABLE conference_sessions(
  session_id int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  title text,
  session_abstract text,
  duration_minutes integer
);

-- Create an embeddings column, set default to store embedding generated UDF call to Azure OpenAI as data is inserted.
ALTER TABLE conference_sessions 
	ADD COLUMN session_embedding vector(1536) --Creates vector column with 1536 dimensions
	GENERATED ALWAYS AS  					 -- Generated on inserts
	(azure_openai.create_embeddings('BeckerEmbedding' -- Calls Azure OpenAI deployment
	 ,title || session_abstract )::vector) STORED;  -- stores the vector.

-- Create a HNSW index
CREATE INDEX ON conference_sessions USING hnsw (session_embedding vector_ip_ops);

-- Show data that was embedded on insert
SELECT * FROM conference_sessions;

-- As rows are inserted, embeddings will be generated and stored
INSERT INTO conference_sessions (title,session_abstract,duration_minutes) 
VALUES
    ('Gen AI with Azure Database for PostgreSQL'
    ,'Learn about building intelligent applications with azure_ai extension and pgvector' 
    , 60)
    ,('Deep Dive: PostgreSQL database storage engine internals'
    ,' We will dig deep into storage internals'
    , 30);


-- Semantic search using vector similarity match
SELECT
 c.session_embedding <#> azure_openai.create_embeddings('BeckerEmbedding', 'Session to learn about building chatbots')::vector as Similarity
 ,*
FROM   conference_sessions c
ORDER BY
    c.session_embedding <#> azure_openai.create_embeddings('BeckerEmbedding', 'Session to learn about building chatbots')::vector;
	
-- Semantic search using vector similarity match	
SELECT
 *
FROM   conference_sessions c
ORDER BY
    c.session_embedding <#> azure_openai.create_embeddings('BeckerEmbedding', 'Session to learn about building chatbots')::vector;
	
	